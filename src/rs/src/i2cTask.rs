/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDIO_H_: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6usize] = b"4.1.0\0";
pub const _PICOLIBC_MINOR__: u32 = 7;
pub const _PICOLIBC_VERSION: &[u8; 6usize] = b"1.7.4\0";
pub const _PICOLIBC__: u32 = 1;
pub const __NEWLIB_MINOR__: u32 = 1;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const __NEWLIB__: u32 = 4;
pub const __PICOLIBC_MINOR__: u32 = 7;
pub const __PICOLIBC_PATCHLEVEL__: u32 = 4;
pub const __PICOLIBC_VERSION__: &[u8; 6usize] = b"1.7.4\0";
pub const __PICOLIBC__: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT_FLOAT: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT_DOUBLE: u32 = 0;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __OBSOLETE_MATH_FLOAT: u32 = 1;
pub const __OBSOLETE_MATH_DOUBLE: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const __RAND_MAX: u32 = 2147483647;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3usize] = b"hh\0";
pub const __INT16: &[u8; 2usize] = b"h\0";
pub const __INT64: &[u8; 3usize] = b"ll\0";
pub const __FAST8: &[u8; 3usize] = b"hh\0";
pub const __FAST16: &[u8; 2usize] = b"h\0";
pub const __FAST64: &[u8; 3usize] = b"ll\0";
pub const __LEAST8: &[u8; 3usize] = b"hh\0";
pub const __LEAST16: &[u8; 2usize] = b"h\0";
pub const __LEAST64: &[u8; 3usize] = b"ll\0";
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __PICOLIBC_UNGETC_SIZE: u32 = 2;
pub const __SRD: u32 = 1;
pub const __SWR: u32 = 2;
pub const __SERR: u32 = 4;
pub const __SEOF: u32 = 8;
pub const __SCLOSE: u32 = 16;
pub const EOF: i32 = -1;
pub const _FDEV_SETUP_READ: u32 = 1;
pub const _FDEV_SETUP_WRITE: u32 = 2;
pub const _FDEV_SETUP_RW: u32 = 3;
pub const _FDEV_ERR: i32 = -1;
pub const _FDEV_EOF: i32 = -2;
pub const BUFSIZ: u32 = 512;
pub const _IONBF: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const LN_ARCH_UNKNOWN: u32 = 0;
pub const LN_ARCH_RISCV: u32 = 1;
pub const LN_ARCH_ARM: u32 = 2;
pub const INPUT: u32 = 0;
pub const OUTPUT: u32 = 1;
pub const INPUT_PULLUP: u32 = 2;
pub const NONE: u32 = 0;
pub const CHANGE: u32 = 1;
pub const FALLING: u32 = 2;
pub const RISING: u32 = 3;
pub const LOW: u32 = 0;
pub const HIGH: u32 = 1;
pub const configPRIO_BITS: u32 = 4;
pub const configLIBRARY_LOWEST_INTERRUPT_PRIORITY: u32 = 15;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 240;
pub const configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 5;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 80;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configMAX_PRIORITIES: u32 = 16;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configUSE_TRACE_FACILITY: u32 = 1;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 5;
pub const configTIMER_TASK_PRIORITY: u32 = 5;
pub const configUSE_TIMERS: u32 = 0;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 400;
pub const configTIMER_QUEUE_LENGTH: u32 = 10;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 0;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const INCLUDE_vTaskPrioritySet: u32 = 0;
pub const INCLUDE_uxTaskPriorityGet: u32 = 0;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configQUEUE_REGISTRY_SIZE: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 1;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 0;
pub const INCLUDE_xTaskAbortDelay: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 0;
pub const INCLUDE_xTaskGetHandle: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_eTaskGetState: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 0;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 0;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const configRUN_ADDITIONAL_TESTS: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &[u8; 8usize] = b"V10.4.3\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 10;
pub const tskKERNEL_VERSION_MINOR: u32 = 4;
pub const tskKERNEL_VERSION_BUILD: u32 = 3;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub const LN_IRQ_OFFSET: u32 = 0;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_longlong;
pub type __uint64_t = cty::c_ulonglong;
pub type __int_least8_t = cty::c_schar;
pub type __uint_least8_t = cty::c_uchar;
pub type __int_least16_t = cty::c_short;
pub type __uint_least16_t = cty::c_ushort;
pub type __int_least32_t = cty::c_int;
pub type __uint_least32_t = cty::c_uint;
pub type __int_least64_t = cty::c_longlong;
pub type __uint_least64_t = cty::c_ulonglong;
pub type __intmax_t = cty::c_longlong;
pub type __uintmax_t = cty::c_ulonglong;
pub type __intptr_t = cty::c_int;
pub type __uintptr_t = cty::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type uint_fast8_t = cty::c_uchar;
pub type int_fast16_t = cty::c_short;
pub type uint_fast16_t = cty::c_ushort;
pub type int_fast32_t = cty::c_int;
pub type uint_fast32_t = cty::c_uint;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast64_t = cty::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxabs(arg1: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denomer: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        arg1: *const cty::c_char,
        arg2: *mut *mut cty::c_char,
        arg3: cty::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        arg1: *const cty::c_char,
        arg2: *mut *mut cty::c_char,
        arg3: cty::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(arg1: *const u32, arg2: *mut *mut u32, arg3: cty::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(arg1: *const u32, arg2: *mut *mut u32, arg3: cty::c_int) -> uintmax_t;
}
extern "C" {
    pub fn strtoimax_l(
        arg1: *const cty::c_char,
        _restrict: *mut *mut cty::c_char,
        arg2: cty::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        arg1: *const cty::c_char,
        _restrict: *mut *mut cty::c_char,
        arg2: cty::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        arg1: *const u32,
        _restrict: *mut *mut u32,
        arg2: cty::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        arg1: *const u32,
        _restrict: *mut *mut u32,
        arg2: cty::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
pub type va_list = u32;
pub type __gnuc_va_list = u32;
pub type size_t = cty::c_uint;
pub type wint_t = cty::c_int;
pub type __blkcnt_t = cty::c_long;
pub type __blksize_t = cty::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = cty::c_long;
pub type __pid_t = cty::c_int;
pub type __dev_t = cty::c_short;
pub type __uid_t = cty::c_ushort;
pub type __gid_t = cty::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = cty::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = cty::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = cty::c_long;
pub type _fpos_t = cty::c_long;
pub type __size_t = cty::c_uint;
pub type _ssize_t = cty::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: cty::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [cty::c_uchar; 4usize],
}
pub type _iconv_t = *mut cty::c_void;
pub type __clock_t = cty::c_ulong;
pub type __time_t = __int_least64_t;
pub type __clockid_t = cty::c_ulong;
pub type __timer_t = cty::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = cty::c_int;
pub type __nlink_t = cty::c_ushort;
pub type __suseconds_t = cty::c_long;
pub type __useconds_t = cty::c_ulong;
pub type __ungetc_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __file {
    pub unget: __ungetc_t,
    pub flags: u8,
    pub put: ::core::option::Option<
        unsafe extern "C" fn(arg1: cty::c_char, arg2: *mut __file) -> cty::c_int,
    >,
    pub get: ::core::option::Option<unsafe extern "C" fn(arg1: *mut __file) -> cty::c_int>,
    pub flush: ::core::option::Option<unsafe extern "C" fn(arg1: *mut __file) -> cty::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __file_close {
    pub file: __file,
    pub close: ::core::option::Option<unsafe extern "C" fn(arg1: *mut __file) -> cty::c_int>,
}
pub type __FILE = __file;
pub type FILE = __FILE;
extern "C" {
    pub static stdin: *mut FILE;
}
extern "C" {
    pub static stdout: *mut FILE;
}
extern "C" {
    pub static stderr: *mut FILE;
}
extern "C" {
    pub fn fdevopen(
        __put: ::core::option::Option<
            unsafe extern "C" fn(arg1: cty::c_char, arg2: *mut FILE) -> cty::c_int,
        >,
        __get: ::core::option::Option<unsafe extern "C" fn(arg1: *mut FILE) -> cty::c_int>,
        __flush: ::core::option::Option<unsafe extern "C" fn(arg1: *mut FILE) -> cty::c_int>,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn vfprintf(__stream: *mut FILE, __fmt: *const cty::c_char, __ap: va_list) -> cty::c_int;
}
extern "C" {
    pub fn fputc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn printf(__fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vprintf(__fmt: *const cty::c_char, __ap: va_list) -> cty::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut cty::c_char, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut cty::c_char,
        __n: size_t,
        __fmt: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut cty::c_char, __fmt: *const cty::c_char, ap: va_list) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut cty::c_char,
        __n: size_t,
        __fmt: *const cty::c_char,
        ap: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn asprintf(strp: *mut *mut cty::c_char, fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vasprintf(
        strp: *mut *mut cty::c_char,
        fmt: *const cty::c_char,
        ap: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn fputs(__str: *const cty::c_char, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn puts(__str: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const cty::c_void,
        __size: size_t,
        __nmemb: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar() -> cty::c_int;
}
extern "C" {
    pub fn ungetc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fgets(
        __str: *mut cty::c_char,
        __size: cty::c_int,
        __stream: *mut FILE,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn gets(__str: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn fread(
        __ptr: *mut cty::c_void,
        __size: size_t,
        __nmemb: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn vfscanf(__stream: *mut FILE, __fmt: *const cty::c_char, __ap: va_list) -> cty::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn scanf(__fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vscanf(__fmt: *const cty::c_char, __ap: va_list) -> cty::c_int;
}
extern "C" {
    pub fn sscanf(__buf: *const cty::c_char, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vsscanf(__buf: *const cty::c_char, __fmt: *const cty::c_char, ap: va_list)
        -> cty::c_int;
}
extern "C" {
    pub fn fflush(stream: *mut FILE) -> cty::c_int;
}
pub type fpos_t = cty::c_longlong;
extern "C" {
    pub fn fgetpos(stream: *mut FILE, pos: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fopen(path: *const cty::c_char, mode: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        path: *const cty::c_char,
        mode: *const cty::c_char,
        stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(arg1: cty::c_int, arg2: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fseek(stream: *mut FILE, offset: cty::c_long, whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn fsetpos(stream: *mut FILE, pos: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn ftell(stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn perror(s: *const cty::c_char);
}
extern "C" {
    pub fn remove(pathname: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rename(oldpath: *const cty::c_char, newpath: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rewind(stream: *mut FILE);
}
extern "C" {
    pub fn setbuf(stream: *mut FILE, buf: *mut cty::c_char);
}
extern "C" {
    pub fn setvbuf(
        stream: *mut FILE,
        buf: *mut cty::c_char,
        mode: cty::c_int,
        size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(s: *mut cty::c_char) -> *mut cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
extern "C" {
    pub fn bcmp(arg1: *const cty::c_void, arg2: *const cty::c_void, arg3: size_t) -> cty::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const cty::c_void, arg2: *mut cty::c_void, arg3: size_t);
}
extern "C" {
    pub fn bzero(arg1: *mut cty::c_void, arg2: size_t);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut cty::c_void, arg2: size_t);
}
extern "C" {
    pub fn ffs(arg1: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ffsl(arg1: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn ffsll(arg1: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn fls(arg1: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn flsl(arg1: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn flsll(arg1: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn index(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memchr(arg1: *const cty::c_void, arg2: cty::c_int, arg3: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(arg1: *const cty::c_void, arg2: *const cty::c_void, arg3: size_t) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(arg1: *mut cty::c_void, arg2: cty::c_int, arg3: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const cty::c_char, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const cty::c_char, arg2: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strerror(arg1: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strncat(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncmp(arg1: *const cty::c_char, arg2: *const cty::c_char, arg3: size_t) -> cty::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const cty::c_char, arg2: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const cty::c_char, arg2: *const cty::c_char) -> size_t;
}
extern "C" {
    pub fn strstr(arg1: *const cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm(arg1: *mut cty::c_char, arg2: *const cty::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: cty::c_int, arg2: locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const cty::c_void,
        arg2: *const cty::c_void,
        arg3: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut cty::c_void,
        arg2: *const cty::c_void,
        arg3: cty::c_int,
        arg4: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn stpcpy(arg1: *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strdup(arg1: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const cty::c_char, arg2: size_t) -> *mut cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(arg1: cty::c_int, arg2: *mut cty::c_char, arg3: size_t) -> cty::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: cty::c_int,
        arg2: cty::c_int,
        arg3: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlcat(arg1: *mut cty::c_char, arg2: *const cty::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn strlcpy(arg1: *mut cty::c_char, arg2: *const cty::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn strnlen(arg1: *const cty::c_char, arg2: size_t) -> size_t;
}
extern "C" {
    pub fn strsep(arg1: *mut *mut cty::c_char, arg2: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const cty::c_char,
        arg2: *const cty::c_char,
        arg3: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlwr(arg1: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strupr(arg1: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strsignal(__signo: cty::c_int) -> *mut cty::c_char;
}
pub const PA0: cty::c_uint = 0;
pub const PA1: cty::c_uint = 1;
pub const PA2: cty::c_uint = 2;
pub const PA3: cty::c_uint = 3;
pub const PA4: cty::c_uint = 4;
pub const PA5: cty::c_uint = 5;
pub const PA6: cty::c_uint = 6;
pub const PA7: cty::c_uint = 7;
pub const PA8: cty::c_uint = 8;
pub const PA9: cty::c_uint = 9;
pub const PA10: cty::c_uint = 10;
pub const PA11: cty::c_uint = 11;
pub const PA12: cty::c_uint = 12;
pub const PA13: cty::c_uint = 13;
pub const PA14: cty::c_uint = 14;
pub const PA15: cty::c_uint = 15;
pub const PB0: cty::c_uint = 16;
pub const PB1: cty::c_uint = 17;
pub const PB2: cty::c_uint = 18;
pub const PB3: cty::c_uint = 19;
pub const PB4: cty::c_uint = 20;
pub const PB5: cty::c_uint = 21;
pub const PB6: cty::c_uint = 22;
pub const PB7: cty::c_uint = 23;
pub const PB8: cty::c_uint = 24;
pub const PB9: cty::c_uint = 25;
pub const PB10: cty::c_uint = 26;
pub const PB11: cty::c_uint = 27;
pub const PB12: cty::c_uint = 28;
pub const PB13: cty::c_uint = 29;
pub const PB14: cty::c_uint = 30;
pub const PB15: cty::c_uint = 31;
pub const PC0: cty::c_uint = 32;
pub const PC1: cty::c_uint = 33;
pub const PC2: cty::c_uint = 34;
pub const PC3: cty::c_uint = 35;
pub const PC4: cty::c_uint = 36;
pub const PC5: cty::c_uint = 37;
pub const PC6: cty::c_uint = 38;
pub const PC7: cty::c_uint = 39;
pub const PC8: cty::c_uint = 40;
pub const PC9: cty::c_uint = 41;
pub const PC10: cty::c_uint = 42;
pub const PC11: cty::c_uint = 43;
pub const PC12: cty::c_uint = 44;
pub const PC13: cty::c_uint = 45;
pub const PC14: cty::c_uint = 46;
pub const PC15: cty::c_uint = 47;
pub const PD0: cty::c_uint = 48;
pub const PD1: cty::c_uint = 49;
pub const PD2: cty::c_uint = 50;
pub const PD3: cty::c_uint = 51;
pub const PD4: cty::c_uint = 52;
pub const PD5: cty::c_uint = 53;
pub const PD6: cty::c_uint = 54;
pub const PD7: cty::c_uint = 55;
pub const PD8: cty::c_uint = 56;
pub const PD9: cty::c_uint = 57;
pub const PD10: cty::c_uint = 58;
pub const PD11: cty::c_uint = 59;
pub const PD12: cty::c_uint = 60;
pub const PD13: cty::c_uint = 61;
pub const PD14: cty::c_uint = 62;
pub const PD15: cty::c_uint = 63;
pub const PE0: cty::c_uint = 64;
pub const PE1: cty::c_uint = 65;
pub const PE2: cty::c_uint = 66;
pub const PE3: cty::c_uint = 67;
pub const PE4: cty::c_uint = 68;
pub const PE5: cty::c_uint = 69;
pub const PE6: cty::c_uint = 70;
pub const PE7: cty::c_uint = 71;
pub const PE8: cty::c_uint = 72;
pub const PE9: cty::c_uint = 73;
pub const PE10: cty::c_uint = 74;
pub const PE11: cty::c_uint = 75;
pub const PE12: cty::c_uint = 76;
pub const PE13: cty::c_uint = 77;
pub const PE14: cty::c_uint = 78;
pub const PE15: cty::c_uint = 79;
pub type _bindgen_ty_1 = cty::c_uint;
pub const GpioMode_lnFLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_FLOATING: GpioMode = 0;
pub const GpioMode_lnINPUT_PULLUP: GpioMode = 2;
pub const GpioMode_lnINPUT_PULLDOWN: GpioMode = 3;
pub const GpioMode_lnOUTPUT: GpioMode = 1;
pub const GpioMode_lnOUTPUT_OPEN_DRAIN: GpioMode = 4;
pub const GpioMode_lnALTERNATE_PP: GpioMode = 5;
pub const GpioMode_lnALTERNATE_OD: GpioMode = 6;
pub const GpioMode_lnPWM: GpioMode = 7;
pub const GpioMode_lnADC_MODE: GpioMode = 8;
pub const GpioMode_lnDAC_MODE: GpioMode = 9;
pub type GpioMode = cty::c_uint;
pub type lnPin = cty::c_int;
extern "C" {
    #[link_name = "\u{1}_Z9lnPinModei8GpioMode"]
    pub fn lnPinMode(pin: lnPin, mode: GpioMode);
}
extern "C" {
    #[link_name = "\u{1}_Z14lnDigitalWriteib"]
    pub fn lnDigitalWrite(pin: lnPin, value: bool);
}
extern "C" {
    #[link_name = "\u{1}_Z13lnDigitalReadi"]
    pub fn lnDigitalRead(pin: lnPin) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnDigitalTogglei"]
    pub fn lnDigitalToggle(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z23lnGetGpioToggleRegisteri"]
    pub fn lnGetGpioToggleRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z26lnGetGpioDirectionRegisteri"]
    pub fn lnGetGpioDirectionRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z22lnGetGpioValueRegisteri"]
    pub fn lnGetGpioValueRegister(port: cty::c_int) -> *mut cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z10lnReadPorti"]
    pub fn lnReadPort(port: cty::c_int) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z15lnRemapTimerPini"]
    pub fn lnRemapTimerPin(timer: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnFastIO {
    pub _onoff: *mut cty::c_ulong,
    pub _onbit: cty::c_ulong,
    pub _offbit: cty::c_ulong,
}
extern "C" {
    #[link_name = "\u{1}_ZN8lnFastIOC1Ei"]
    pub fn lnFastIO_lnFastIO(this: *mut lnFastIO, p: lnPin);
}
impl lnFastIO {
    #[inline]
    pub unsafe fn new(p: lnPin) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastIO_lnFastIO(__bindgen_tmp.as_mut_ptr(), p);
        __bindgen_tmp.assume_init()
    }
}
pub const lnEdge_LN_EDGE_NONE: lnEdge = 0;
pub const lnEdge_LN_EDGE_RISING: lnEdge = 1;
pub const lnEdge_LN_EDGE_FALLING: lnEdge = 2;
pub const lnEdge_LN_EDGE_BOTH: lnEdge = 3;
pub type lnEdge = cty::c_uint;
pub type lnExtiCallback =
    ::core::option::Option<unsafe extern "C" fn(pin: lnPin, cookie: *mut cty::c_void)>;
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiAttachInterrupti6lnEdgePFviPvES0_"]
    pub fn lnExtiAttachInterrupt(
        pin: lnPin,
        edge: lnEdge,
        cb: lnExtiCallback,
        cookie: *mut cty::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiDetachInterrupti"]
    pub fn lnExtiDetachInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnExtiEnableInterrupti"]
    pub fn lnExtiEnableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z22lnExtiDisableInterrupti"]
    pub fn lnExtiDisableInterrupt(pin: lnPin);
}
extern "C" {
    #[link_name = "\u{1}_Z7pinModehh"]
    pub fn pinMode(pin: u8, b: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z12digitalWritehh"]
    pub fn digitalWrite(pin: u8, val: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z13digitalToggleh"]
    pub fn digitalToggle(pin: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z11digitalReadh"]
    pub fn digitalRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10analogReadh"]
    pub fn analogRead(pin: u8) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z11analogWritehi"]
    pub fn analogWrite(pin: u8, val: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z15attachInterrupthPFvvEi"]
    pub fn attachInterrupt(
        interruptNum: u8,
        userFunc: ::core::option::Option<unsafe extern "C" fn()>,
        mode: cty::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z15detachInterrupth"]
    pub fn detachInterrupt(interruptNum: u8);
}
extern "C" {
    #[link_name = "\u{1}_Z6millisv"]
    pub fn millis() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z6microsv"]
    pub fn micros() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z5delayi"]
    pub fn delay(ms: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z17delayMicrosecondsi"]
    pub fn delayMicroseconds(us: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z12noInterruptsv"]
    pub fn noInterrupts();
}
extern "C" {
    #[link_name = "\u{1}_Z10interruptsv"]
    pub fn interrupts();
}
extern "C" {
    pub fn deadEnd(code: cty::c_int);
}
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub static mut SystemCoreClock: cty::c_ulong;
}
extern "C" {
    pub fn do_assert(a: *const cty::c_char);
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
pub type StackType_t = cty::c_ulong;
pub type BaseType_t = cty::c_long;
pub type UBaseType_t = cty::c_ulong;
pub type TickType_t = cty::c_ulong;
extern "C" {
    pub fn vPortSuppressTicksAndSleep(xExpectedIdleTime: TickType_t);
}
extern "C" {
    pub fn vPortValidateInterruptPriority();
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut cty::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: size_t,
}
pub type HeapRegion_t = HeapRegion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xHeapStats {
    pub xAvailableHeapSpaceInBytes: size_t,
    pub xSizeOfLargestFreeBlockInBytes: size_t,
    pub xSizeOfSmallestFreeBlockInBytes: size_t,
    pub xNumberOfFreeBlocks: size_t,
    pub xMinimumEverFreeBytesRemaining: size_t,
    pub xNumberOfSuccessfulAllocations: size_t,
    pub xNumberOfSuccessfulFrees: size_t,
}
pub type HeapStats_t = xHeapStats;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn vPortGetHeapStats(pxHeapStats: *mut HeapStats_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut cty::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> size_t;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 4usize],
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut cty::c_void; 2usize],
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut cty::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut cty::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut cty::c_void,
    pub ucDummy7: [u8; 16usize],
    pub uxDummy10: [UBaseType_t; 2usize],
    pub uxDummy12: [UBaseType_t; 2usize],
    pub ulDummy18: [cty::c_ulong; 5usize],
    pub ucDummy19: [u8; 5usize],
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut cty::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub uxDummy8: UBaseType_t,
    pub ucDummy9: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut cty::c_void,
    pub uxDummy2: UBaseType_t,
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub uxDummy3: UBaseType_t,
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut cty::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut cty::c_void,
    pub pvDummy6: TaskFunction_t,
    pub uxDummy7: UBaseType_t,
    pub ucDummy8: u8,
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut cty::c_void; 3usize],
    pub ucDummy3: u8,
    pub uxDummy4: UBaseType_t,
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
    pub pvOwner: *mut cty::c_void,
    pub pvContainer: *mut xLIST,
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    pub pxIndex: *mut ListItem_t,
    pub xListEnd: MiniListItem_t,
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
pub type eTaskState = cty::c_uint;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
pub type TimeOut_t = xTIME_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut cty::c_void,
    pub ulLengthInBytes: cty::c_ulong,
    pub ulParameters: cty::c_ulong,
}
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const cty::c_char,
    pub usStackDepth: u16,
    pub pvParameters: *mut cty::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const cty::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: cty::c_ulong,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: u16,
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
pub type eSleepModeStatus = cty::c_uint;
extern "C" {
    pub fn xTaskCreate(
        pxTaskCode: TaskFunction_t,
        pcName: *const cty::c_char,
        usStackDepth: u16,
        pvParameters: *mut cty::c_void,
        uxPriority: UBaseType_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    pub fn xTaskDelayUntil(
        pxPreviousWakeTime: *mut TickType_t,
        xTimeIncrement: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    pub fn vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskStartScheduler();
}
extern "C" {
    pub fn vTaskEndScheduler();
}
extern "C" {
    pub fn vTaskSuspendAll();
}
extern "C" {
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn xTaskGetHandle(pcNameToQuery: *const cty::c_char) -> TaskHandle_t;
}
extern "C" {
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    pub fn vApplicationStackOverflowHook(xTask: TaskHandle_t, pcTaskName: *mut cty::c_char);
}
extern "C" {
    pub fn vApplicationTickHook();
}
extern "C" {
    pub fn xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut cty::c_void,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut cty::c_ulong,
    ) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskList(pcWriteBuffer: *mut cty::c_char);
}
extern "C" {
    pub fn vTaskGetRunTimeStats(pcWriteBuffer: *mut cty::c_char);
}
extern "C" {
    pub fn ulTaskGetIdleRunTimeCounter() -> cty::c_ulong;
}
extern "C" {
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: cty::c_ulong,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut cty::c_ulong,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: cty::c_ulong,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut cty::c_ulong,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskGenericNotifyWait(
        uxIndexToWaitOn: UBaseType_t,
        ulBitsToClearOnEntry: cty::c_ulong,
        ulBitsToClearOnExit: cty::c_ulong,
        pulNotificationValue: *mut cty::c_ulong,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vTaskGenericNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    pub fn ulTaskGenericNotifyTake(
        uxIndexToWaitOn: UBaseType_t,
        xClearCountOnExit: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn xTaskGenericNotifyStateClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn ulTaskGenericNotifyValueClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
        ulBitsToClear: cty::c_ulong,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskCatchUpTicks(xTicksToCatchUp: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn uxTaskGetTaskNumber(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskSetTaskNumber(xTask: TaskHandle_t, uxHandle: UBaseType_t);
}
extern "C" {
    pub fn vTaskStepTick(xTicksToJump: TickType_t);
}
extern "C" {
    pub fn eTaskConfirmSleepModeStatus() -> eSleepModeStatus;
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
pub type QueueSetHandle_t = *mut QueueDefinition;
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut cty::c_void) -> BaseType_t;
}
extern "C" {
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xQueueCRSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xCoRoutinePreviouslyWoken: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        pxTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut cty::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    pub fn xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn xQueueSelectFromSetFromISR(xQueueSet: QueueSetHandle_t) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
pub type SemaphoreHandle_t = QueueHandle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    _unused: [u8; 0],
}
pub type TimerHandle_t = *mut tmrTimerControl;
pub type TimerCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(xTimer: TimerHandle_t)>;
pub type PendedFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void, arg2: cty::c_ulong)>;
extern "C" {
    pub fn xTimerCreate(
        pcTimerName: *const cty::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut cty::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
    ) -> TimerHandle_t;
}
extern "C" {
    pub fn pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut cty::c_void);
}
extern "C" {
    pub fn xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn xTimerPendFunctionCallFromISR(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: cty::c_ulong,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut cty::c_void,
        ulParameter2: cty::c_ulong,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn pcTimerGetName(xTimer: TimerHandle_t) -> *const cty::c_char;
}
extern "C" {
    pub fn vTimerSetReloadMode(xTimer: TimerHandle_t, uxAutoReload: UBaseType_t);
}
extern "C" {
    pub fn uxTimerGetReloadMode(xTimer: TimerHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommand(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vTimerSetTimerNumber(xTimer: TimerHandle_t, uxTimerNumber: UBaseType_t);
}
extern "C" {
    pub fn uxTimerGetTimerNumber(xTimer: TimerHandle_t) -> UBaseType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
pub type EventBits_t = TickType_t;
extern "C" {
    pub fn xEventGroupCreate() -> EventGroupHandle_t;
}
extern "C" {
    pub fn xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupClearBitsFromISR(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupSetBitsFromISR(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn xEventGroupGetBitsFromISR(xEventGroup: EventGroupHandle_t) -> EventBits_t;
}
extern "C" {
    pub fn vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn vEventGroupSetBitsCallback(pvEventGroup: *mut cty::c_void, ulBitsToSet: cty::c_ulong);
}
extern "C" {
    pub fn vEventGroupClearBitsCallback(
        pvEventGroup: *mut cty::c_void,
        ulBitsToClear: cty::c_ulong,
    );
}
extern "C" {
    pub fn uxEventGroupGetNumber(xEventGroup: *mut cty::c_void) -> UBaseType_t;
}
extern "C" {
    pub fn vEventGroupSetNumber(xEventGroup: *mut cty::c_void, uxEventGroupNumber: UBaseType_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnBinarySemaphore {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEv"]
    pub fn lnBinarySemaphore_take(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore7tryTakeEv"]
    pub fn lnBinarySemaphore_tryTake(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4takeEi"]
    pub fn lnBinarySemaphore_take1(this: *mut lnBinarySemaphore, timeoutMs: cty::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphore4giveEv"]
    pub fn lnBinarySemaphore_give(this: *mut lnBinarySemaphore) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN17lnBinarySemaphoreC1Ev"]
    pub fn lnBinarySemaphore_lnBinarySemaphore(this: *mut lnBinarySemaphore);
}
impl lnBinarySemaphore {
    #[inline]
    pub unsafe fn take(&mut self) -> bool {
        lnBinarySemaphore_take(self)
    }
    #[inline]
    pub unsafe fn tryTake(&mut self) -> bool {
        lnBinarySemaphore_tryTake(self)
    }
    #[inline]
    pub unsafe fn take1(&mut self, timeoutMs: cty::c_int) -> bool {
        lnBinarySemaphore_take1(self, timeoutMs)
    }
    #[inline]
    pub unsafe fn give(&mut self) -> bool {
        lnBinarySemaphore_give(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnBinarySemaphore_lnBinarySemaphore(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct lnTask__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnTask {
    pub vtable_: *const lnTask__bindgen_vtable,
    pub _taskHandle: TaskHandle_t,
    pub _name: *const cty::c_char,
    pub _priority: cty::c_int,
    pub _taskSize: cty::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTask5startEv"]
    pub fn lnTask_start(this: *mut lnTask);
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskC2EPKcii"]
    pub fn lnTask_lnTask(
        this: *mut lnTask,
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    );
}
impl lnTask {
    #[inline]
    pub unsafe fn start(&mut self) {
        lnTask_start(self)
    }
    #[inline]
    pub unsafe fn new(
        name: *const cty::c_char,
        priority: cty::c_int,
        taskSize: cty::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnTask_lnTask(__bindgen_tmp.as_mut_ptr(), name, priority, taskSize);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN6lnTaskD1Ev"]
    pub fn lnTask_lnTask_destructor(this: *mut lnTask);
}
#[repr(C)]
pub struct lnEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnEventGroup {
    pub vtable_: *const lnEventGroup__bindgen_vtable,
    pub _handle: EventGroupHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup9setEventsEm"]
    pub fn lnEventGroup_setEvents(this: *mut lnEventGroup, events: cty::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10waitEventsEmi"]
    pub fn lnEventGroup_waitEvents(
        this: *mut lnEventGroup,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroup10readEventsEm"]
    pub fn lnEventGroup_readEvents(this: *mut lnEventGroup, maskInt: cty::c_ulong) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupC1Ev"]
    pub fn lnEventGroup_lnEventGroup(this: *mut lnEventGroup);
}
impl lnEventGroup {
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_ulong) {
        lnEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(
        &mut self,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong {
        lnEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_ulong) -> cty::c_ulong {
        lnEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnEventGroup_lnEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12lnEventGroupD1Ev"]
    pub fn lnEventGroup_lnEventGroup_destructor(this: *mut lnEventGroup);
}
#[repr(C)]
pub struct lnFastEventGroup__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnFastEventGroup {
    pub vtable_: *const lnFastEventGroup__bindgen_vtable,
    pub _value: cty::c_ulong,
    pub _mask: cty::c_ulong,
    pub _waitingTask: TaskHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup13takeOwnershipEv"]
    pub fn lnFastEventGroup_takeOwnership(this: *mut lnFastEventGroup);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup9setEventsEm"]
    pub fn lnFastEventGroup_setEvents(this: *mut lnFastEventGroup, events: cty::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10waitEventsEmi"]
    pub fn lnFastEventGroup_waitEvents(
        this: *mut lnFastEventGroup,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroup10readEventsEm"]
    pub fn lnFastEventGroup_readEvents(
        this: *mut lnFastEventGroup,
        maskInt: cty::c_ulong,
    ) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupC1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup(this: *mut lnFastEventGroup);
}
impl lnFastEventGroup {
    #[inline]
    pub unsafe fn takeOwnership(&mut self) {
        lnFastEventGroup_takeOwnership(self)
    }
    #[inline]
    pub unsafe fn setEvents(&mut self, events: cty::c_ulong) {
        lnFastEventGroup_setEvents(self, events)
    }
    #[inline]
    pub unsafe fn waitEvents(
        &mut self,
        maskint: cty::c_ulong,
        timeout: cty::c_int,
    ) -> cty::c_ulong {
        lnFastEventGroup_waitEvents(self, maskint, timeout)
    }
    #[inline]
    pub unsafe fn readEvents(&mut self, maskInt: cty::c_ulong) -> cty::c_ulong {
        lnFastEventGroup_readEvents(self, maskInt)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnFastEventGroup_lnFastEventGroup(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16lnFastEventGroupD1Ev"]
    pub fn lnFastEventGroup_lnFastEventGroup_destructor(this: *mut lnFastEventGroup);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnMutex {
    pub _handle: SemaphoreHandle_t,
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex4lockEv"]
    pub fn lnMutex_lock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutex6unlockEv"]
    pub fn lnMutex_unlock(this: *mut lnMutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN7lnMutexC1Ev"]
    pub fn lnMutex_lnMutex(this: *mut lnMutex);
}
impl lnMutex {
    #[inline]
    pub unsafe fn lock(&mut self) -> bool {
        lnMutex_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) -> bool {
        lnMutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        lnMutex_lnMutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct lnAutoMutex {
    pub _tex: *mut lnMutex,
}
extern "C" {
    #[link_name = "\u{1}_Z10LoggerInitv"]
    pub fn LoggerInit();
}
extern "C" {
    #[link_name = "\u{1}_Z11debugLoggerPKcz"]
    pub fn debugLogger(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn Logger(fmt: *const cty::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_Z17lnInitSystemClockv"]
    pub fn lnInitSystemClock();
}
pub const Peripherals_pNONE: Peripherals = 0;
pub const Peripherals_pSPI0: Peripherals = 1;
pub const Peripherals_pSPI1: Peripherals = 2;
pub const Peripherals_pSPI2: Peripherals = 3;
pub const Peripherals_pUART0: Peripherals = 4;
pub const Peripherals_pUART1: Peripherals = 5;
pub const Peripherals_pUART2: Peripherals = 6;
pub const Peripherals_pUART3: Peripherals = 7;
pub const Peripherals_pUART4: Peripherals = 8;
pub const Peripherals_pI2C0: Peripherals = 9;
pub const Peripherals_pI2C1: Peripherals = 10;
pub const Peripherals_pCAN0: Peripherals = 11;
pub const Peripherals_pCAN1: Peripherals = 12;
pub const Peripherals_pDAC: Peripherals = 13;
pub const Peripherals_pPMU: Peripherals = 14;
pub const Peripherals_pBKPI: Peripherals = 15;
pub const Peripherals_pWWDGT: Peripherals = 16;
pub const Peripherals_pTIMER0: Peripherals = 17;
pub const Peripherals_pTIMER1: Peripherals = 18;
pub const Peripherals_pTIMER2: Peripherals = 19;
pub const Peripherals_pTIMER3: Peripherals = 20;
pub const Peripherals_pTIMER4: Peripherals = 21;
pub const Peripherals_pTIMER5: Peripherals = 22;
pub const Peripherals_pTIMER6: Peripherals = 23;
pub const Peripherals_pUSB: Peripherals = 24;
pub const Peripherals_pADC0: Peripherals = 25;
pub const Peripherals_pADC1: Peripherals = 26;
pub const Peripherals_pGPIOA: Peripherals = 27;
pub const Peripherals_pGPIOB: Peripherals = 28;
pub const Peripherals_pGPIOC: Peripherals = 29;
pub const Peripherals_pGPIOD: Peripherals = 30;
pub const Peripherals_pGPIOE: Peripherals = 31;
pub const Peripherals_pAF: Peripherals = 32;
pub const Peripherals_pDMA0: Peripherals = 33;
pub const Peripherals_pDMA1: Peripherals = 34;
pub const Peripherals_pAPB1: Peripherals = 100;
pub const Peripherals_pAPB2: Peripherals = 101;
pub const Peripherals_pSYSCLOCK: Peripherals = 102;
pub type Peripherals = cty::c_uint;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_2: lnADC_DIVIDER = 0;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_4: lnADC_DIVIDER = 1;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_6: lnADC_DIVIDER = 2;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_8: lnADC_DIVIDER = 3;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_12: lnADC_DIVIDER = 5;
pub const lnADC_DIVIDER_lnADC_CLOCK_DIV_BY_16: lnADC_DIVIDER = 7;
pub type lnADC_DIVIDER = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lnPeripherals {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals5resetE11Peripherals"]
    pub fn lnPeripherals_reset(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals6enableE11Peripherals"]
    pub fn lnPeripherals_enable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals7disableE11Peripherals"]
    pub fn lnPeripherals_disable(periph: Peripherals);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals8getClockE11Peripherals"]
    pub fn lnPeripherals_getClock(periph: Peripherals) -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals13setAdcDividerE13lnADC_DIVIDER"]
    pub fn lnPeripherals_setAdcDivider(divider: lnADC_DIVIDER);
}
extern "C" {
    #[link_name = "\u{1}_ZN13lnPeripherals14enableUsb48MhzEv"]
    pub fn lnPeripherals_enableUsb48Mhz();
}
impl lnPeripherals {
    #[inline]
    pub unsafe fn reset(periph: Peripherals) {
        lnPeripherals_reset(periph)
    }
    #[inline]
    pub unsafe fn enable(periph: Peripherals) {
        lnPeripherals_enable(periph)
    }
    #[inline]
    pub unsafe fn disable(periph: Peripherals) {
        lnPeripherals_disable(periph)
    }
    #[inline]
    pub unsafe fn getClock(periph: Peripherals) -> cty::c_ulong {
        lnPeripherals_getClock(periph)
    }
    #[inline]
    pub unsafe fn setAdcDivider(divider: lnADC_DIVIDER) {
        lnPeripherals_setAdcDivider(divider)
    }
    #[inline]
    pub unsafe fn enableUsb48Mhz() {
        lnPeripherals_enableUsb48Mhz()
    }
}
pub const LnIRQ_LN_IRQ_MSIP: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_NONE: LnIRQ = -13;
pub const LnIRQ_LN_IRQ_RESET: LnIRQ = -12;
pub const LnIRQ_LN_IRQ_NMI: LnIRQ = -11;
pub const LnIRQ_LN_IRQ_HARDFAULT: LnIRQ = -10;
pub const LnIRQ_LN_IRQ_MEMMANAGE: LnIRQ = -9;
pub const LnIRQ_LN_IRQ_BUSFAULT: LnIRQ = -8;
pub const LnIRQ_LN_IRQ_USAGEFAULT: LnIRQ = -7;
pub const LnIRQ_LN_IRQ_RESERVED: LnIRQ = -6;
pub const LnIRQ_LN_IRQ_SVCALL: LnIRQ = -5;
pub const LnIRQ_LN_IRQ_DEBUGMON: LnIRQ = -4;
pub const LnIRQ_LN_IRQ_RESERVED2: LnIRQ = -3;
pub const LnIRQ_LN_IRQ_PENDSV: LnIRQ = -2;
pub const LnIRQ_LN_IRQ_SYSTICK: LnIRQ = -1;
pub const LnIRQ_LN_IRQ_WWDG: LnIRQ = 0;
pub const LnIRQ_LN_IRQ_LVD: LnIRQ = 1;
pub const LnIRQ_LN_IRQ_TAMPER: LnIRQ = 2;
pub const LnIRQ_LN_IRQ_RTC: LnIRQ = 3;
pub const LnIRQ_LN_IRQ_FMC: LnIRQ = 4;
pub const LnIRQ_LN_IRQ_RCU_RCC: LnIRQ = 5;
pub const LnIRQ_LN_IRQ_EXTI0: LnIRQ = 6;
pub const LnIRQ_LN_IRQ_EXTI1: LnIRQ = 7;
pub const LnIRQ_LN_IRQ_EXTI2: LnIRQ = 8;
pub const LnIRQ_LN_IRQ_EXTI3: LnIRQ = 9;
pub const LnIRQ_LN_IRQ_EXTI4: LnIRQ = 10;
pub const LnIRQ_LN_IRQ_DMA0_Channel0: LnIRQ = 11;
pub const LnIRQ_LN_IRQ_DMA0_Channel1: LnIRQ = 12;
pub const LnIRQ_LN_IRQ_DMA0_Channel2: LnIRQ = 13;
pub const LnIRQ_LN_IRQ_DMA0_Channel3: LnIRQ = 14;
pub const LnIRQ_LN_IRQ_DMA0_Channel4: LnIRQ = 15;
pub const LnIRQ_LN_IRQ_DMA0_Channel5: LnIRQ = 16;
pub const LnIRQ_LN_IRQ_DMA0_Channel6: LnIRQ = 17;
pub const LnIRQ_LN_IRQ_ADC0_1: LnIRQ = 18;
pub const LnIRQ_LN_IRQ_USB_HP_CAN_TX: LnIRQ = 19;
pub const LnIRQ_LN_IRQ_USB_LP_CAN_RX0: LnIRQ = 20;
pub const LnIRQ_LN_IRQ_CAN_RX1: LnIRQ = 21;
pub const LnIRQ_LN_IRQ_CAN_SCE: LnIRQ = 22;
pub const LnIRQ_LN_IRQ_EXTI5_9: LnIRQ = 23;
pub const LnIRQ_LN_IRQ_TIMER0_BRK: LnIRQ = 24;
pub const LnIRQ_LN_IRQ_TIMER0_UP: LnIRQ = 25;
pub const LnIRQ_LN_IRQ_TIMER0_TRG_CMT: LnIRQ = 26;
pub const LnIRQ_LN_IRQ_TIMER0_Channel: LnIRQ = 27;
pub const LnIRQ_LN_IRQ_TIMER1: LnIRQ = 28;
pub const LnIRQ_LN_IRQ_TIMER2: LnIRQ = 29;
pub const LnIRQ_LN_IRQ_TIMER3: LnIRQ = 30;
pub const LnIRQ_LN_IRQ_I2C0_EV: LnIRQ = 31;
pub const LnIRQ_LN_IRQ_I2C0_ER: LnIRQ = 32;
pub const LnIRQ_LN_IRQ_I2C1_EV: LnIRQ = 33;
pub const LnIRQ_LN_IRQ_I2C1_ER: LnIRQ = 34;
pub const LnIRQ_LN_IRQ_SPI0: LnIRQ = 35;
pub const LnIRQ_LN_IRQ_SPI1: LnIRQ = 36;
pub const LnIRQ_LN_IRQ_USART0: LnIRQ = 37;
pub const LnIRQ_LN_IRQ_USART1: LnIRQ = 38;
pub const LnIRQ_LN_IRQ_USART2: LnIRQ = 39;
pub const LnIRQ_LN_IRQ_EXTI10_15: LnIRQ = 40;
pub const LnIRQ_LN_IRQ_RTCALARM: LnIRQ = 41;
pub const LnIRQ_LN_IRQ_USBWAKEUP: LnIRQ = 42;
pub const LnIRQ_LN_IRQ_TIMER7_BRK_TIMER12: LnIRQ = 43;
pub const LnIRQ_LN_IRQ_TIMER7_UP_TIMER13: LnIRQ = 44;
pub const LnIRQ_LN_IRQ_TIMER7_TRG_COM_TIMER14: LnIRQ = 45;
pub const LnIRQ_LN_IRQ_TIMER7_CC: LnIRQ = 46;
pub const LnIRQ_LN_IRQ_ADC2: LnIRQ = 47;
pub const LnIRQ_LN_IRQ_FSMC: LnIRQ = 48;
pub const LnIRQ_LN_IRQ_SDIO: LnIRQ = 49;
pub const LnIRQ_LN_IRQ_TIMER4: LnIRQ = 50;
pub const LnIRQ_LN_IRQ_SPI2: LnIRQ = 51;
pub const LnIRQ_LN_IRQ_UART3: LnIRQ = 52;
pub const LnIRQ_LN_IRQ_UART4: LnIRQ = 53;
pub const LnIRQ_LN_IRQ_TIMER5: LnIRQ = 54;
pub const LnIRQ_LN_IRQ_TIMER6: LnIRQ = 55;
pub const LnIRQ_LN_IRQ_DMA1_Channel0: LnIRQ = 56;
pub const LnIRQ_LN_IRQ_DMA1_Channel1: LnIRQ = 57;
pub const LnIRQ_LN_IRQ_DMA1_Channel2: LnIRQ = 58;
pub const LnIRQ_LN_IRQ_DMA1_Channel3: LnIRQ = 59;
pub const LnIRQ_LN_IRQ_DMA1_Channel4: LnIRQ = 60;
pub const LnIRQ_LN_IRQ_ARM_LAST: LnIRQ = 61;
pub type LnIRQ = cty::c_int;
pub type lnInterruptHandler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_Z17lnEnableInterruptRK5LnIRQ"]
    pub fn lnEnableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z18lnDisableInterruptRK5LnIRQ"]
    pub fn lnDisableInterrupt(irq: *const LnIRQ);
}
extern "C" {
    #[link_name = "\u{1}_Z21lnSetInterruptHandlerRK5LnIRQPFvvE"]
    pub fn lnSetInterruptHandler(irq: *const LnIRQ, handler: lnInterruptHandler);
}
extern "C" {
    #[link_name = "\u{1}_Z16lnIrqSetPriorityRK5LnIRQi"]
    pub fn lnIrqSetPriority(irq: *const LnIRQ, prio: cty::c_int);
}
extern "C" {
    pub fn _putchar(character: cty::c_char);
}
extern "C" {
    pub fn printf_(format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sprintf_(buffer: *mut cty::c_char, format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn snprintf_(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf_(
        buffer: *mut cty::c_char,
        count: size_t,
        format: *const cty::c_char,
        va: va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vprintf_(format: *const cty::c_char, va: va_list) -> cty::c_int;
}
extern "C" {
    pub fn fctprintf(
        out: ::core::option::Option<
            unsafe extern "C" fn(character: cty::c_char, arg: *mut cty::c_void),
        >,
        arg: *mut cty::c_void,
        format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetUsv"]
    pub fn lnGetUs() -> cty::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnGetUs64v"]
    pub fn lnGetUs64() -> u64;
}
extern "C" {
    #[link_name = "\u{1}_Z9lnDelayUsi"]
    pub fn lnDelayUs(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnDelayi"]
    pub fn lnDelay(wait: cty::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z7lnGetMsv"]
    pub fn lnGetMs() -> cty::c_ulong;
}
extern "C" {
    pub fn free(a: *mut cty::c_void);
}
extern "C" {
    pub fn malloc(size: size_t) -> *mut cty::c_void;
}
#[repr(C)]
pub struct lnI2cTask__bindgen_vtable(cty::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct lnI2cTask {
    pub vtable_: *const lnI2cTask__bindgen_vtable,
    pub _cb: lnI2cTask_signalCb,
}
pub const lnI2cTask_SignalChange_VoltageChangeEvent: lnI2cTask_SignalChange = 1;
pub const lnI2cTask_SignalChange_CurrentChangeEvent: lnI2cTask_SignalChange = 2;
pub const lnI2cTask_SignalChange_CCChangeEvent: lnI2cTask_SignalChange = 4;
pub type lnI2cTask_SignalChange = cty::c_uint;
pub type lnI2cTask_signalCb = ::core::option::Option<unsafe extern "C" fn(signal: cty::c_ulong)>;
